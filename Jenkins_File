pipeline {
    agent any

    environment {
        // Define Python virtual environment path
        VENV_DIR = "${WORKSPACE}/.venv"
        REPORT_DIR = "${WORKSPACE}/test-reports"
        
    }

    parameters {
        
        string(name: 'PYTEST_OPTIONS', defaultValue: '-v', description: 'Additional options for pytest')
        string(name: 'BRANCH_NAME', defaultValue: 'master', description: 'Branch to checkout')
        //booleanParam(name: 'ENABLE_VERBOSE', defaultValue: true, description: 'Enable verbose output (-v)')
    }
    

    stages {
       //stage('Trigger Downstream Jobs') {
            //steps {
                //script {
                    // Trigger three downstream jobs in parallel
                   // parallel(
                       // "Downstream Job 1": {
                          //  build job: 'pytest_job1'
                       // },
                       // "Downstream Job 2": {
                       //     build job: 'pytest_job2'
                      //  },
                       
                //    )
              //  }
       //     }
   //    }
        stage('Checkout') {
            steps {
                   script {
                // Checkout the code from the repository
                // Checkout the branch specified by the user in the build parameter
                    // Enable sparse-checkout and specify the desired paths
                    bat """
                    git config core.sparseCheckout true
                    echo "Pract/*" >> .git/info/sparse-checkout  // specify paths to checkout
                    git clone --no-checkout https://github.com/Sagandeep-kaur/JenkinsPract.git
                    cd JenkinsPract
                    git checkout HEAD
                    """
                   }

            }
        }
        
        stage('Set up Python Environment') {
            steps {
                // Create a virtual environment if it doesn't exist
                script {
                    if (!fileExists("${VENV_DIR}/bin/activate")) {
                        bat "python -m venv ${VENV_DIR}"
                        
                }
                }
                // Install required dependencies
                bat """
           
                    //${VENV_DIR}\\Scripts\\activate
                    call ${VENV_DIR}\\Scripts\\activate.bat
                     pip --version
                     pip3 install -r requirements.txt
                     pip3 install pytest-xdist
                     pip3 install  pytest-junitxml
                     pip3 show selenium
                     pip3 install pytest-html
                """
            }
        }
        
        stage('Run Tests') {
            steps {
                // Run tests with pytest and generate HTML report
                script {
                    //def pytest_command = pytest 
                        
                        //if (params.ENABLE_VERBOSE) {
                            //pytest_command += "-v"
                       // }
                    bat """
                        if not exist "${REPORT_DIR}" mkdir "${REPORT_DIR}"
                        call ${VENV_DIR}\\Scripts\\activate.bat
                        pytest ${params.PYTEST_OPTIONS} --maxfail=5 --disable-warnings --html="${REPORT_DIR}\\test_report.html" --junitxml="${REPORT_DIR}\\test_report.xml"
                        
                        dir "${REPORT_DIR}"
                       
                    """
                }
            }
        }

        stage('Publish Report') {
            steps {
                // Archive the test results (HTML file)
                
                archiveArtifacts artifacts: '**/test-reports/test_report.html', allowEmptyArchive: true
                archiveArtifacts artifacts: '**/test-reports/test_report.xml', allowEmptyArchive: true
            }    
        }
    }

    post {
        always {
            // Clean up, deactivate the virtual environment
            cleanWs()
        }
    }
}
